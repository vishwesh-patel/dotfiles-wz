import type * as vscode from "vscode";
import * as lsp from "vscode-languageserver-protocol";
import { TSLanguageServiceDelegate } from "../service/delegate";
import { Disposable } from "../utils/dispose";
import { OutputChannel } from "./log";
export declare class WindowShimService extends Disposable {
    private readonly delegate;
    private outputChannels;
    private _onDidChangeActiveTextEditor;
    readonly onDidChangeActiveTextEditor: lsp.Event<vscode.TextEditor>;
    private _onDidChangeVisibleTextEditors;
    readonly onDidChangeVisibleTextEditors: lsp.Event<vscode.TextEditor[]>;
    private _onDidChangeTabGroups;
    private _onDidChangeTabs;
    readonly tabGroups: {
        onDidChangeTabGroups: lsp.Event<vscode.TabGroupChangeEvent>;
        onDidChangeTabs: lsp.Event<vscode.TabChangeEvent>;
        readonly all: {
            isActive: boolean;
            viewColumn: number;
            activeTab: undefined;
            tabs: never[];
        }[];
        activeTabGroup: {
            isActive: boolean;
            viewColumn: number;
            activeTab: undefined;
            tabs: never[];
        };
    };
    constructor(delegate: TSLanguageServiceDelegate);
    get visibleTextEditors(): vscode.TextEditor[];
    createOutputChannel(name: string, options: string | {
        log: true;
    } | undefined): OutputChannel;
    showErrorMessage(message: string, ...items: (vscode.MessageOptions | string | vscode.MessageItem)[]): Promise<string | lsp.MessageActionItem | vscode.MessageOptions | vscode.MessageItem | null>;
    showInformationMessage(message: string, ...items: (vscode.MessageOptions | string | vscode.MessageItem)[]): Promise<string | lsp.MessageActionItem | vscode.MessageOptions | vscode.MessageItem | null>;
    showWarningMessage(message: string, ...items: (vscode.MessageOptions | string | vscode.MessageItem)[]): Promise<string | lsp.MessageActionItem | vscode.MessageOptions | vscode.MessageItem | null>;
    withProgress<R>(options: vscode.ProgressOptions, task: (progress: vscode.Progress<{
        increment: number;
        message: string;
    }>, token: vscode.CancellationToken) => Thenable<R>): Promise<R>;
    showTextDocument(document: vscode.TextDocument): Promise<boolean>;
    _showMessagePrompt(type: lsp.MessageType, message: string, items: (vscode.MessageOptions | string | vscode.MessageItem)[]): Promise<string | lsp.MessageActionItem | vscode.MessageOptions | vscode.MessageItem | null>;
}
//# sourceMappingURL=window.d.ts.map