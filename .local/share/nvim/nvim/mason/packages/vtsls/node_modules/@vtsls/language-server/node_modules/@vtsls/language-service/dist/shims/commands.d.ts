import * as lsp from "vscode-languageserver-protocol";
import { TSLanguageServiceDelegate } from "../service/delegate";
import { Disposable } from "../utils/dispose";
export interface ICommand {
    id: string;
    callback: (...args: any[]) => any;
    thisArg?: any;
}
export declare class CommandsShimService extends Disposable {
    private readonly delegate;
    private readonly _commands;
    private readonly _onDidRegisterCommand;
    readonly onDidRegisterCommand: lsp.Event<string>;
    constructor(delegate: TSLanguageServiceDelegate);
    getCommands(filterInternal?: boolean): Promise<string[]>;
    registerCommand(id: string, callback: (...args: any[]) => any, thisArg?: any): lsp.Disposable;
    executeCommand<T, A extends any[]>(id: string, ...args: A): Promise<T | undefined>;
    dispose(): void;
}
//# sourceMappingURL=commands.d.ts.map