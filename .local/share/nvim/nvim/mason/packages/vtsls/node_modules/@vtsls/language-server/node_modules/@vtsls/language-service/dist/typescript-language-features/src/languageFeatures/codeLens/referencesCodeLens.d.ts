import * as vscode from 'vscode';
import { DocumentSelector } from '../../configuration/documentSelector';
import { LanguageDescription } from '../../configuration/languageDescription';
import { CachedResponse } from '../../tsServer/cachedResponse';
import type * as Proto from '../../tsServer/protocol/protocol';
import { ITypeScriptServiceClient } from '../../typescriptService';
import { ReferencesCodeLens, TypeScriptBaseCodeLensProvider } from './baseCodeLensProvider';
export declare class TypeScriptReferencesCodeLensProvider extends TypeScriptBaseCodeLensProvider {
    protected _cachedResponse: CachedResponse<Proto.NavTreeResponse>;
    private readonly language;
    constructor(client: ITypeScriptServiceClient, _cachedResponse: CachedResponse<Proto.NavTreeResponse>, language: LanguageDescription);
    resolveCodeLens(codeLens: ReferencesCodeLens, token: vscode.CancellationToken): Promise<vscode.CodeLens>;
    private getCodeLensLabel;
    protected extractSymbol(document: vscode.TextDocument, item: Proto.NavigationTree, parent: Proto.NavigationTree | undefined): vscode.Range | undefined;
}
export declare function register(selector: DocumentSelector, language: LanguageDescription, client: ITypeScriptServiceClient, cachedResponse: CachedResponse<Proto.NavTreeResponse>): vscode.Disposable;
//# sourceMappingURL=referencesCodeLens.d.ts.map