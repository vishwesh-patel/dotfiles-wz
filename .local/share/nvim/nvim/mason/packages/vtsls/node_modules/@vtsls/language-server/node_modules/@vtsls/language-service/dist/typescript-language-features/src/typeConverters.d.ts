/**
 * Helpers for converting FROM vscode types TO ts types
 */
import * as vscode from 'vscode';
import type * as Proto from './tsServer/protocol/protocol';
import * as PConst from './tsServer/protocol/protocol.const';
import { ITypeScriptServiceClient } from './typescriptService';
export declare namespace Range {
    const fromTextSpan: (span: Proto.TextSpan) => vscode.Range;
    const toTextSpan: (range: vscode.Range) => Proto.TextSpan;
    const fromLocations: (start: Proto.Location, end: Proto.Location) => vscode.Range;
    const toFileRange: (range: vscode.Range) => Proto.FileRange;
    const toFileRangeRequestArgs: (file: string, range: vscode.Range) => Proto.FileRangeRequestArgs;
    const toFileRangesRequestArgs: (file: string, ranges: vscode.Range[]) => Proto.FileRangesRequestArgs;
    const toFormattingRequestArgs: (file: string, range: vscode.Range) => Proto.FormatRequestArgs;
}
export declare namespace Position {
    const fromLocation: (tslocation: Proto.Location) => vscode.Position;
    const toLocation: (vsPosition: vscode.Position) => Proto.Location;
    const toFileLocationRequestArgs: (file: string, position: vscode.Position) => Proto.FileLocationRequestArgs;
}
export declare namespace Location {
    const fromTextSpan: (resource: vscode.Uri, tsTextSpan: Proto.TextSpan) => vscode.Location;
}
export declare namespace TextEdit {
    const fromCodeEdit: (edit: Proto.CodeEdit) => vscode.TextEdit;
}
export declare namespace WorkspaceEdit {
    function fromFileCodeEdits(client: ITypeScriptServiceClient, edits: Iterable<Proto.FileCodeEdits>): vscode.WorkspaceEdit;
    function withFileCodeEdits(workspaceEdit: vscode.WorkspaceEdit, client: ITypeScriptServiceClient, edits: Iterable<Proto.FileCodeEdits>): vscode.WorkspaceEdit;
}
export declare namespace SymbolKind {
    function fromProtocolScriptElementKind(kind: Proto.ScriptElementKind): vscode.SymbolKind.Module | vscode.SymbolKind.Class | vscode.SymbolKind.Method | vscode.SymbolKind.Property | vscode.SymbolKind.Constructor | vscode.SymbolKind.Enum | vscode.SymbolKind.Interface | vscode.SymbolKind.Function | vscode.SymbolKind.Variable | vscode.SymbolKind.String | vscode.SymbolKind.EnumMember | vscode.SymbolKind.TypeParameter;
}
export declare namespace CompletionTriggerKind {
    function toProtocolCompletionTriggerKind(kind: vscode.CompletionTriggerKind): Proto.CompletionTriggerKind;
}
export declare namespace OrganizeImportsMode {
    function toProtocolOrganizeImportsMode(mode: PConst.OrganizeImportsMode): Proto.OrganizeImportsMode;
}
//# sourceMappingURL=typeConverters.d.ts.map