import * as vscode from 'vscode';
import * as Proto from '../tsServer/protocol/protocol';
export declare enum TsServerLogLevel {
    Off = 0,
    Normal = 1,
    Terse = 2,
    Verbose = 3
}
export declare namespace TsServerLogLevel {
    function fromString(value: string): TsServerLogLevel;
    function toString(value: TsServerLogLevel): string;
}
export declare const enum SyntaxServerConfiguration {
    Never = 0,
    Always = 1,
    /** Use a single syntax server for every request, even on desktop */
    Auto = 2
}
export declare class ImplicitProjectConfiguration {
    readonly target: string | undefined;
    readonly module: string | undefined;
    readonly checkJs: boolean;
    readonly experimentalDecorators: boolean;
    readonly strictNullChecks: boolean;
    readonly strictFunctionTypes: boolean;
    constructor(configuration: vscode.WorkspaceConfiguration);
    isEqualTo(other: ImplicitProjectConfiguration): boolean;
    private static readTarget;
    private static readModule;
    private static readCheckJs;
    private static readExperimentalDecorators;
    private static readImplicitStrictNullChecks;
    private static readImplicitStrictFunctionTypes;
}
export interface TypeScriptServiceConfiguration {
    readonly autoUseWorkspaceTsdk: boolean;
    readonly locale: string | null;
    readonly globalTsdk: string | null;
    readonly localTsdk: string | null;
    readonly npmLocation: string | null;
    readonly tsServerLogLevel: TsServerLogLevel;
    readonly tsServerPluginPaths: readonly string[];
    readonly implicitProjectConfiguration: ImplicitProjectConfiguration;
    readonly disableAutomaticTypeAcquisition: boolean;
    readonly useSyntaxServer: SyntaxServerConfiguration;
    readonly webProjectWideIntellisenseEnabled: boolean;
    readonly webProjectWideIntellisenseSuppressSemanticErrors: boolean;
    readonly webTypeAcquisitionEnabled: boolean;
    readonly enableDiagnosticsTelemetry: boolean;
    readonly enableProjectDiagnostics: boolean;
    readonly maxTsServerMemory: number;
    readonly enablePromptUseWorkspaceTsdk: boolean;
    readonly useVsCodeWatcher: boolean;
    readonly watchOptions: Proto.WatchOptions | undefined;
    readonly includePackageJsonAutoImports: 'auto' | 'on' | 'off' | undefined;
    readonly enableTsServerTracing: boolean;
    readonly localNodePath: string | null;
    readonly globalNodePath: string | null;
    readonly workspaceSymbolsExcludeLibrarySymbols: boolean;
    readonly enableRegionDiagnostics: boolean;
}
export declare function areServiceConfigurationsEqual(a: TypeScriptServiceConfiguration, b: TypeScriptServiceConfiguration): boolean;
export interface ServiceConfigurationProvider {
    loadFromWorkspace(): TypeScriptServiceConfiguration;
}
export declare abstract class BaseServiceConfigurationProvider implements ServiceConfigurationProvider {
    loadFromWorkspace(): TypeScriptServiceConfiguration;
    protected abstract readGlobalTsdk(configuration: vscode.WorkspaceConfiguration): string | null;
    protected abstract readLocalTsdk(configuration: vscode.WorkspaceConfiguration): string | null;
    protected abstract readLocalNodePath(configuration: vscode.WorkspaceConfiguration): string | null;
    protected abstract readGlobalNodePath(configuration: vscode.WorkspaceConfiguration): string | null;
    protected readTsServerLogLevel(configuration: vscode.WorkspaceConfiguration): TsServerLogLevel;
    protected readTsServerPluginPaths(configuration: vscode.WorkspaceConfiguration): string[];
    protected readNpmLocation(configuration: vscode.WorkspaceConfiguration): string | null;
    protected readDisableAutomaticTypeAcquisition(configuration: vscode.WorkspaceConfiguration): boolean;
    protected readLocale(configuration: vscode.WorkspaceConfiguration): string | null;
    protected readUseSyntaxServer(configuration: vscode.WorkspaceConfiguration): SyntaxServerConfiguration;
    protected readEnableDiagnosticsTelemetry(configuration: vscode.WorkspaceConfiguration): boolean;
    protected readEnableProjectDiagnostics(configuration: vscode.WorkspaceConfiguration): boolean;
    private readUseVsCodeWatcher;
    private readWatchOptions;
    protected readIncludePackageJsonAutoImports(configuration: vscode.WorkspaceConfiguration): 'auto' | 'on' | 'off' | undefined;
    protected readMaxTsServerMemory(configuration: vscode.WorkspaceConfiguration): number;
    protected readEnablePromptUseWorkspaceTsdk(configuration: vscode.WorkspaceConfiguration): boolean;
    protected readEnableTsServerTracing(configuration: vscode.WorkspaceConfiguration): boolean;
    private readWorkspaceSymbolsExcludeLibrarySymbols;
    private readWebProjectWideIntellisenseEnable;
    private readWebProjectWideIntellisenseSuppressSemanticErrors;
    private readWebTypeAcquisition;
    private readEnableRegionDiagnostics;
}
//# sourceMappingURL=configuration.d.ts.map