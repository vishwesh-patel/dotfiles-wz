import * as vscode from 'vscode';
import { API } from '../../tsServer/api';
import { ClientCapability, ITypeScriptServiceClient } from '../../typescriptService';
import { Disposable } from '../../utils/dispose';
export declare class Condition extends Disposable {
    private readonly getValue;
    private _value;
    constructor(getValue: () => boolean, onUpdate: (handler: () => void) => void);
    get value(): boolean;
    private readonly _onDidChange;
    readonly onDidChange: vscode.Event<void>;
}
export declare function conditionalRegistration(conditions: readonly Condition[], doRegister: () => vscode.Disposable): vscode.Disposable;
export declare function requireMinVersion(client: ITypeScriptServiceClient, minVersion: API): Condition;
export declare function requireGlobalConfiguration(section: string, configValue: string): Condition;
export declare function requireSomeCapability(client: ITypeScriptServiceClient, ...capabilities: readonly ClientCapability[]): Condition;
//# sourceMappingURL=dependentRegistration.d.ts.map