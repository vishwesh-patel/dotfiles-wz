import { TypeScriptServiceConfiguration } from '../configuration/configuration';
import { API } from './api';
export declare const enum TypeScriptVersionSource {
    Bundled = "bundled",
    TsNightlyExtension = "ts-nightly-extension",
    NodeModules = "node-modules",
    UserSetting = "user-setting",
    WorkspaceSetting = "workspace-setting"
}
export declare class TypeScriptVersion {
    readonly source: TypeScriptVersionSource;
    readonly path: string;
    readonly apiVersion: API | undefined;
    private readonly _pathLabel?;
    constructor(source: TypeScriptVersionSource, path: string, apiVersion: API | undefined, _pathLabel?: string | undefined);
    get tsServerPath(): string;
    get pathLabel(): string;
    get isValid(): boolean;
    eq(other: TypeScriptVersion): boolean;
    get displayName(): string;
}
export interface ITypeScriptVersionProvider {
    updateConfiguration(configuration: TypeScriptServiceConfiguration): void;
    readonly defaultVersion: TypeScriptVersion;
    readonly globalVersion: TypeScriptVersion | undefined;
    readonly localVersion: TypeScriptVersion | undefined;
    readonly localVersions: readonly TypeScriptVersion[];
    readonly bundledVersion: TypeScriptVersion;
}
//# sourceMappingURL=versionProvider.d.ts.map