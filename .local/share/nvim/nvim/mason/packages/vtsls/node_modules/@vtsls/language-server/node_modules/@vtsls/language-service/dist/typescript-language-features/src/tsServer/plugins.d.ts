import * as vscode from 'vscode';
import { Disposable } from '../utils/dispose';
export interface TypeScriptServerPlugin {
    readonly extension: vscode.Extension<unknown>;
    readonly uri?: vscode.Uri;
    readonly name: string;
    readonly enableForWorkspaceTypeScriptVersions: boolean;
    readonly languages: ReadonlyArray<string>;
    readonly configNamespace?: string;
}
export declare class PluginManager extends Disposable {
    private readonly _pluginConfigurations;
    private _plugins?;
    constructor();
    get plugins(): ReadonlyArray<TypeScriptServerPlugin>;
    private readonly _onDidUpdatePlugins;
    readonly onDidChangePlugins: vscode.Event<this>;
    private readonly _onDidUpdateConfig;
    readonly onDidUpdateConfig: vscode.Event<{
        pluginId: string;
        config: {};
    }>;
    setConfiguration(pluginId: string, config: {}): void;
    configurations(): IterableIterator<[string, {}]>;
    private readPlugins;
}
//# sourceMappingURL=plugins.d.ts.map