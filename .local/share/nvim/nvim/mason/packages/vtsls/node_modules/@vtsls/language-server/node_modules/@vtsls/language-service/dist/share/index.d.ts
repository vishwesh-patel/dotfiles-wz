import { WorkspaceShimService } from "../shims/workspace";
import { TSLspConverter } from "../utils/converter";
import { createCommandsConverter } from "./commandsConverter";
export declare let commandsConverter: ReturnType<typeof createCommandsConverter>;
export declare function initializeShareMod(converter: TSLspConverter, workspaceService: WorkspaceShimService): {
    commandsConverter: {
        "editor.action.showReferences": {
            toArgs: (document: import("vscode").Uri, codeLensStart: import("vscode").Position, locations: import("vscode").Location[]) => (string | import("vscode-languageserver-protocol").Position | import("vscode-languageserver-protocol").Location[])[];
        };
        "editor.action.rename": {
            toArgs: (...renamings: (readonly [import("vscode").Uri, import("vscode").Position])[]) => (string | import("vscode-languageserver-protocol").Position)[][];
        };
        "typescript.goToSourceDefinition": {
            fromArgs: (uri: import("vscode-languageserver-protocol").URI, position: import("vscode-languageserver-protocol").Position) => (import("vscode").Position | import("../shims/textdocument").IsomorphicTextDocument)[];
            toRes: (locations: import("vscode").Location[]) => import("vscode-languageserver-protocol").Location[];
        };
        "typescript.findAllFileReferences": {
            fromArgs: (uri: import("vscode-languageserver-protocol").URI) => import("vscode-uri").URI[];
            toRes: (locations: import("vscode").Location[]) => import("vscode-languageserver-protocol").Location[];
        };
        "_typescript.moveToFileRefactoring": {
            toArgs: ({ action, document, range, }: {
                action: import("typescript").RefactorActionInfo;
                document: import("vscode").TextDocument;
                range: import("vscode").Range;
                trigger: import("vscode").CodeActionTriggerKind;
            }) => (string | import("vscode-languageserver-protocol").Range | import("typescript").RefactorActionInfo)[];
            fromArgs: (action: import("typescript").RefactorActionInfo, uri: import("vscode-languageserver-protocol").URI, range: import("vscode-languageserver-protocol").Range, targetFile: string) => {
                action: import("typescript").RefactorActionInfo;
                document: import("../shims/textdocument").IsomorphicTextDocument;
                range: import("vscode").Range;
                targetFile: string;
                trigger: 1;
            }[];
        };
        "_typescript.selectRefactoring": {
            toArgs: ({ document, refactor, rangeOrSelection, trigger, }: {
                document: import("vscode").TextDocument;
                refactor: import("typescript").ApplicableRefactorInfo;
                rangeOrSelection: import("vscode").Range | import("vscode").Selection;
                trigger: import("vscode").CodeActionTriggerKind;
            }) => (string | import("vscode-languageserver-protocol").Range | import("typescript").ApplicableRefactorInfo | import("vscode").CodeActionTriggerKind)[];
            fromArgs: (uri: import("vscode-languageserver-protocol").URI, refactor: import("typescript").ApplicableRefactorInfo, range: import("vscode-languageserver-protocol").Range, trigger: import("vscode").CodeActionTriggerKind) => {
                document: import("../shims/textdocument").IsomorphicTextDocument;
                refactor: import("typescript").ApplicableRefactorInfo;
                rangeOrSelection: import("vscode").Range;
                trigger: import("vscode").CodeActionTriggerKind;
            }[];
        };
        "_typescript.applyCodeActionCommand": {
            toArgs: ({ action, diagnostic, document, }: {
                action: import("typescript").server.protocol.CodeFixAction;
                diagnostic: import("vscode").Diagnostic;
                document: import("vscode").TextDocument;
            }) => (string | import("vscode-languageserver-protocol").Diagnostic | import("typescript").server.protocol.CodeFixAction)[];
            fromArgs: (action: import("typescript").server.protocol.CodeFixAction, diagnostic: import("vscode-languageserver-protocol").Diagnostic, uri: import("vscode-languageserver-protocol").URI) => {
                action: import("typescript").server.protocol.CodeFixAction;
                diagnostic: import("vscode").Diagnostic;
                document: import("../shims/textdocument").IsomorphicTextDocument;
            }[];
        };
    };
};
//# sourceMappingURL=index.d.ts.map