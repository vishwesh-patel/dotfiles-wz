import * as vscode from 'vscode';
import { CommandManager } from './commands/commandManager';
import { LanguageDescription } from './configuration/languageDescription';
import { DiagnosticKind } from './languageFeatures/diagnostics';
import FileConfigurationManager from './languageFeatures/fileConfigurationManager';
import { TelemetryReporter } from './logging/telemetry';
import TypeScriptServiceClient from './typescriptServiceClient';
import TypingsStatus from './ui/typingsStatus';
import { Disposable } from './utils/dispose';
export default class LanguageProvider extends Disposable {
    private readonly client;
    private readonly description;
    private readonly commandManager;
    private readonly telemetryReporter;
    private readonly typingsStatus;
    private readonly fileConfigurationManager;
    private readonly onCompletionAccepted;
    constructor(client: TypeScriptServiceClient, description: LanguageDescription, commandManager: CommandManager, telemetryReporter: TelemetryReporter, typingsStatus: TypingsStatus, fileConfigurationManager: FileConfigurationManager, onCompletionAccepted: (item: vscode.CompletionItem) => void);
    private get documentSelector();
    private registerProviders;
    private configurationChanged;
    handlesUri(resource: vscode.Uri): boolean;
    handlesDocument(doc: vscode.TextDocument): boolean;
    private handlesConfigFile;
    private get id();
    get diagnosticSource(): string;
    private updateValidate;
    private updateSuggestionDiagnostics;
    reInitialize(): void;
    triggerAllDiagnostics(): void;
    diagnosticsReceived(diagnosticsKind: DiagnosticKind, file: vscode.Uri, diagnostics: (vscode.Diagnostic & {
        reportUnnecessary: any;
        reportDeprecated: any;
    })[], ranges: vscode.Range[] | undefined): void;
    configFileDiagnosticsReceived(file: vscode.Uri, diagnostics: vscode.Diagnostic[]): void;
    private get _diagnosticLanguage();
}
//# sourceMappingURL=languageProvider.d.ts.map