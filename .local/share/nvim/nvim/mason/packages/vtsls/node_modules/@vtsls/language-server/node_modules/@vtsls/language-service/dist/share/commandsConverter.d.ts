import type * as Proto from "@vsc-ts/tsServer/protocol/protocol";
import type * as vscode from "vscode";
import * as lsp from "vscode-languageserver-protocol";
import { URI } from "vscode-uri";
import { WorkspaceShimService } from "../shims/workspace";
import { TSLspConverter } from "../utils/converter";
type AnyFunction = (...args: any[]) => any;
export type GenericCommandsConverter = {
    [key in string]?: {
        toArgs?: AnyFunction;
        fromArgs?: AnyFunction;
        toRes?: AnyFunction;
    };
};
export declare function createCommandsConverter(converter: TSLspConverter, workspaceService: WorkspaceShimService): {
    "editor.action.showReferences": {
        toArgs: (document: vscode.Uri, codeLensStart: vscode.Position, locations: vscode.Location[]) => (string | lsp.Position | lsp.Location[])[];
    };
    "editor.action.rename": {
        toArgs: (...renamings: (readonly [vscode.Uri, vscode.Position])[]) => (string | lsp.Position)[][];
    };
    "typescript.goToSourceDefinition": {
        fromArgs: (uri: lsp.URI, position: lsp.Position) => (vscode.Position | import("../shims/textdocument").IsomorphicTextDocument)[];
        toRes: (locations: vscode.Location[]) => lsp.Location[];
    };
    "typescript.findAllFileReferences": {
        fromArgs: (uri: lsp.URI) => URI[];
        toRes: (locations: vscode.Location[]) => lsp.Location[];
    };
    "_typescript.moveToFileRefactoring": {
        toArgs: ({ action, document, range, }: {
            action: Proto.RefactorActionInfo;
            document: vscode.TextDocument;
            range: vscode.Range;
            trigger: vscode.CodeActionTriggerKind;
        }) => (string | lsp.Range | Proto.RefactorActionInfo)[];
        fromArgs: (action: Proto.RefactorActionInfo, uri: lsp.URI, range: lsp.Range, targetFile: string) => {
            action: Proto.RefactorActionInfo;
            document: import("../shims/textdocument").IsomorphicTextDocument;
            range: vscode.Range;
            targetFile: string;
            trigger: 1;
        }[];
    };
    "_typescript.selectRefactoring": {
        toArgs: ({ document, refactor, rangeOrSelection, trigger, }: {
            document: vscode.TextDocument;
            refactor: Proto.ApplicableRefactorInfo;
            rangeOrSelection: vscode.Range | vscode.Selection;
            trigger: vscode.CodeActionTriggerKind;
        }) => (string | lsp.Range | Proto.ApplicableRefactorInfo | vscode.CodeActionTriggerKind)[];
        fromArgs: (uri: lsp.URI, refactor: Proto.ApplicableRefactorInfo, range: lsp.Range, trigger: vscode.CodeActionTriggerKind) => {
            document: import("../shims/textdocument").IsomorphicTextDocument;
            refactor: Proto.ApplicableRefactorInfo;
            rangeOrSelection: vscode.Range;
            trigger: vscode.CodeActionTriggerKind;
        }[];
    };
    "_typescript.applyCodeActionCommand": {
        toArgs: ({ action, diagnostic, document, }: {
            action: Proto.CodeFixAction;
            diagnostic: vscode.Diagnostic;
            document: vscode.TextDocument;
        }) => (string | lsp.Diagnostic | Proto.CodeFixAction)[];
        fromArgs: (action: Proto.CodeFixAction, diagnostic: lsp.Diagnostic, uri: lsp.URI) => {
            action: Proto.CodeFixAction;
            diagnostic: vscode.Diagnostic;
            document: import("../shims/textdocument").IsomorphicTextDocument;
        }[];
    };
};
export {};
//# sourceMappingURL=commandsConverter.d.ts.map