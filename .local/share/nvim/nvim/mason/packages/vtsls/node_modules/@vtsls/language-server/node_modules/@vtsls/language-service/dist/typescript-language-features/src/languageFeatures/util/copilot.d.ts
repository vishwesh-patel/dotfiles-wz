import * as vscode from 'vscode';
import { Command } from '../../commands/commandManager';
import type * as Proto from '../../tsServer/protocol/protocol';
import { ITypeScriptServiceClient } from '../../typescriptService';
import { TelemetryReporter } from '../../logging/telemetry';
export declare class EditorChatFollowUp implements Command {
    private readonly client;
    private readonly telemetryReporter;
    static readonly ID = "_typescript.quickFix.editorChatReplacement2";
    readonly id = "_typescript.quickFix.editorChatReplacement2";
    constructor(client: ITypeScriptServiceClient, telemetryReporter: TelemetryReporter);
    execute({ message, document, expand, action }: EditorChatFollowUp_Args): Promise<void>;
}
export interface EditorChatFollowUp_Args {
    readonly message: string;
    readonly document: vscode.TextDocument;
    readonly expand: Expand;
    readonly action: {
        readonly type: 'refactor';
        readonly refactor: Proto.RefactorActionInfo;
    } | {
        readonly type: 'quickfix';
        readonly quickfix: Proto.CodeFixAction;
    };
}
export declare class CompositeCommand implements Command {
    static readonly ID = "_typescript.compositeCommand";
    readonly id = "_typescript.compositeCommand";
    execute(...commands: vscode.Command[]): Promise<void>;
}
export type Expand = {
    kind: 'none';
    readonly range: vscode.Range;
} | {
    kind: 'navtree-function';
    readonly pos: vscode.Position;
} | {
    kind: 'refactor-info';
    readonly refactor: Proto.RefactorEditInfo;
} | {
    kind: 'code-action';
    readonly action: Proto.CodeAction;
};
//# sourceMappingURL=copilot.d.ts.map