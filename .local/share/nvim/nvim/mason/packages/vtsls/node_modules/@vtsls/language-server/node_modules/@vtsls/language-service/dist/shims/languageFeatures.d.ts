import type * as vscode from "vscode";
import * as lsp from "vscode-languageserver-protocol";
import { URI } from "vscode-uri";
import { TSLanguageServiceDelegate } from "../service/delegate";
import { Barrier } from "../utils/barrier";
import { Disposable } from "../utils/dispose";
import { DiagnosticsShimService } from "./diagnostics";
export type ProviderEntry<T, Args = unknown> = {
    provider: T;
    selector: vscode.DocumentSelector;
} & Args;
declare class LanguageFeatureRegistry<T, Args = unknown> extends Disposable {
    featureId: string;
    private entries;
    constructor(featureId: string);
    register(id: number, registry: ProviderEntry<T, Args>): lsp.Disposable;
    [Symbol.iterator](): MapIterator<[number, ProviderEntry<T, Args>]>;
}
export declare class CodeActionProviderRegistry extends LanguageFeatureRegistry<vscode.CodeActionProvider, {
    metadata?: vscode.CodeActionProviderMetadata;
}> {
    constructor();
}
export declare class CompletionProviderRegistry extends LanguageFeatureRegistry<vscode.CompletionItemProvider, {
    triggerCharacters: string[];
}> {
    constructor();
}
interface ProviderWithScore<T, Args> {
    id: number;
    provider: T;
    args: Args;
    score: number;
}
export interface LanguageFeatureRegistryHandle<T, Args> {
    getProviders(doc: vscode.TextDocument): ProviderWithScore<T, Args>[];
    getProviderById(id: number): ProviderEntry<T, Args>;
    getHighestProvider(doc: vscode.TextDocument): ProviderWithScore<T, Args>;
}
type InferRegistryHandle<R extends LanguageFeatureRegistry<any>> = R extends LanguageFeatureRegistry<infer T, infer A> ? LanguageFeatureRegistryHandle<T, A> : never;
export type CodeActionRegistryHandle = InferRegistryHandle<CodeActionProviderRegistry>;
export type CompletionRegistryHandle = InferRegistryHandle<CompletionProviderRegistry>;
export declare class ProviderNotFoundError extends Error {
    providerFeature: string;
    constructor(providerFeature: string);
}
declare class LanguageFeaturesRegistryStore extends Disposable {
    readonly callHierarchy: LanguageFeatureRegistry<vscode.CallHierarchyProvider, unknown>;
    readonly codeActions: CodeActionProviderRegistry;
    readonly codeLens: LanguageFeatureRegistry<vscode.CodeLensProvider<vscode.CodeLens>, unknown>;
    readonly completionItem: CompletionProviderRegistry;
    readonly declaration: LanguageFeatureRegistry<vscode.DeclarationProvider, unknown>;
    readonly definition: LanguageFeatureRegistry<vscode.DefinitionProvider, unknown>;
    readonly documentFormattingEdit: LanguageFeatureRegistry<vscode.DocumentFormattingEditProvider, unknown>;
    readonly documentHighlight: LanguageFeatureRegistry<vscode.DocumentHighlightProvider, unknown>;
    readonly documentLink: LanguageFeatureRegistry<vscode.DocumentLinkProvider<vscode.DocumentLink>, unknown>;
    readonly documentRangeFormattingEdit: LanguageFeatureRegistry<vscode.DocumentRangeFormattingEditProvider, unknown>;
    readonly documentRangeSemanticTokens: LanguageFeatureRegistry<vscode.DocumentRangeSemanticTokensProvider, unknown>;
    readonly documentSymbol: LanguageFeatureRegistry<vscode.DocumentSymbolProvider, unknown>;
    readonly documentSemanticTokens: LanguageFeatureRegistry<vscode.DocumentSemanticTokensProvider, unknown>;
    readonly foldingRange: LanguageFeatureRegistry<vscode.FoldingRangeProvider, unknown>;
    readonly hover: LanguageFeatureRegistry<vscode.HoverProvider, unknown>;
    readonly implementation: LanguageFeatureRegistry<vscode.ImplementationProvider, unknown>;
    readonly inlayHints: LanguageFeatureRegistry<vscode.InlayHintsProvider<vscode.InlayHint>, unknown>;
    readonly onTypeFormatting: LanguageFeatureRegistry<vscode.OnTypeFormattingEditProvider, {
        firstTriggerCharacter: string;
        moreTriggerCharacter: string[];
    }>;
    readonly linkedEditingRange: LanguageFeatureRegistry<vscode.LinkedEditingRangeProvider, unknown>;
    readonly reference: LanguageFeatureRegistry<vscode.ReferenceProvider, unknown>;
    readonly rename: LanguageFeatureRegistry<vscode.RenameProvider, unknown>;
    readonly selectionRange: LanguageFeatureRegistry<vscode.SelectionRangeProvider, unknown>;
    readonly signatureHelp: LanguageFeatureRegistry<vscode.SignatureHelpProvider, vscode.SignatureHelpProviderMetadata>;
    readonly typeDefinition: LanguageFeatureRegistry<vscode.TypeDefinitionProvider, unknown>;
    readonly typeHierarchy: LanguageFeatureRegistry<vscode.TypeHierarchyProvider, unknown>;
    readonly workspaceSymbol: LanguageFeatureRegistry<vscode.WorkspaceSymbolProvider<vscode.SymbolInformation>, unknown>;
    $getProviders<T, Args = unknown>(doc: vscode.TextDocument, providers: LanguageFeatureRegistry<T, Args>): ProviderWithScore<T, Args>[];
    $getHighestProvider<T, Args = unknown>(doc: vscode.TextDocument, providers: LanguageFeatureRegistry<T, Args>): ProviderWithScore<T, Args>;
    $getProviderById<Registry extends LanguageFeatureRegistry<any>>(id: number, providers: Registry): Registry extends LanguageFeatureRegistry<infer T, infer Args> ? ProviderEntry<T, Args> : never;
    $getProviderWithoutSelector<T, Args = unknown>(providers: LanguageFeatureRegistry<T, Args>): {
        id: number;
    } & {
        provider: T;
        selector: vscode.DocumentSelector;
    } & Args;
    $withRegistry<T, Args = unknown>(registry: LanguageFeatureRegistry<T, Args>): LanguageFeatureRegistryHandle<T, Args>;
}
export declare class LanguageFeaturesShimService extends Disposable {
    private readonly diagnostics;
    private _registryStore;
    readonly onDidChangeDiagnostics: lsp.Event<vscode.DiagnosticChangeEvent>;
    constructor(delegate: TSLanguageServiceDelegate, diagnostics: DiagnosticsShimService);
    $staticFeaturesRegistered: Barrier<void>;
    $triggerStaticFeaturesRegistered(): void;
    createDiagnosticCollection(name?: string): import("./diagnostics").DiagnosticCollection;
    getDiagnostics(resource: URI): vscode.Diagnostic[];
    get $providers(): LanguageFeaturesRegistryStore;
    private _idGen;
    private registerProvider;
    registerCompletionItemProvider(selector: vscode.DocumentSelector, provider: vscode.CompletionItemProvider, ...triggerCharacters: string[]): lsp.Disposable;
    registerCodeActionsProvider(selector: vscode.DocumentSelector, provider: vscode.CodeActionProvider, metadata?: vscode.CodeActionProviderMetadata): lsp.Disposable;
    registerCodeLensProvider(selector: vscode.DocumentSelector, provider: vscode.CodeLensProvider): lsp.Disposable;
    registerDefinitionProvider(selector: vscode.DocumentSelector, provider: vscode.DefinitionProvider): lsp.Disposable;
    registerImplementationProvider(selector: vscode.DocumentSelector, provider: vscode.ImplementationProvider): lsp.Disposable;
    registerTypeDefinitionProvider(selector: vscode.DocumentSelector, provider: vscode.TypeDefinitionProvider): lsp.Disposable;
    registerDeclarationProvider(selector: vscode.DocumentSelector, provider: vscode.DeclarationProvider): lsp.Disposable;
    registerHoverProvider(selector: vscode.DocumentSelector, provider: vscode.HoverProvider): lsp.Disposable;
    registerDocumentHighlightProvider(selector: vscode.DocumentSelector, provider: vscode.DocumentHighlightProvider): lsp.Disposable;
    registerMultiDocumentHighlightProvider(): void;
    registerDocumentSymbolProvider(selector: vscode.DocumentSelector, provider: vscode.DocumentSymbolProvider): lsp.Disposable;
    registerWorkspaceSymbolProvider(provider: vscode.WorkspaceSymbolProvider): lsp.Disposable;
    registerReferenceProvider(selector: vscode.DocumentSelector, provider: vscode.ReferenceProvider): lsp.Disposable;
    registerRenameProvider(selector: vscode.DocumentSelector, provider: vscode.RenameProvider): lsp.Disposable;
    registerDocumentSemanticTokensProvider(selector: vscode.DocumentSelector, provider: vscode.DocumentSemanticTokensProvider): lsp.Disposable;
    registerDocumentRangeSemanticTokensProvider(selector: vscode.DocumentSelector, provider: vscode.DocumentRangeSemanticTokensProvider): lsp.Disposable;
    registerDocumentFormattingEditProvider(selector: vscode.DocumentSelector, provider: vscode.DocumentFormattingEditProvider): lsp.Disposable;
    registerDocumentRangeFormattingEditProvider(selector: vscode.DocumentSelector, provider: vscode.DocumentRangeFormattingEditProvider): lsp.Disposable;
    registerSignatureHelpProvider(selector: vscode.DocumentSelector, provider: vscode.SignatureHelpProvider, metadata: vscode.SignatureHelpProviderMetadata): lsp.Disposable;
    registerDocumentLinkProvider(selector: vscode.DocumentSelector, provider: vscode.DocumentLinkProvider): lsp.Disposable;
    registerInlayHintsProvider(selector: vscode.DocumentSelector, provider: vscode.InlayHintsProvider): lsp.Disposable;
    registerOnTypeFormattingEditProvider(selector: vscode.DocumentSelector, provider: vscode.OnTypeFormattingEditProvider, firstTriggerCharacter: string, ...moreTriggerCharacter: string[]): lsp.Disposable;
    registerFoldingRangeProvider(selector: vscode.DocumentSelector, provider: vscode.FoldingRangeProvider): lsp.Disposable;
    registerSelectionRangeProvider(selector: vscode.DocumentSelector, provider: vscode.SelectionRangeProvider): lsp.Disposable;
    registerCallHierarchyProvider(selector: vscode.DocumentSelector, provider: vscode.CallHierarchyProvider): lsp.Disposable;
    registerTypeHierarchyProvider(selector: vscode.DocumentSelector, provider: vscode.TypeHierarchyProvider): lsp.Disposable;
    registerLinkedEditingRangeProvider(selector: vscode.DocumentSelector, provider: vscode.LinkedEditingRangeProvider): lsp.Disposable;
    match(selector: vscode.DocumentSelector, doc: vscode.TextDocument): number;
}
export {};
//# sourceMappingURL=languageFeatures.d.ts.map