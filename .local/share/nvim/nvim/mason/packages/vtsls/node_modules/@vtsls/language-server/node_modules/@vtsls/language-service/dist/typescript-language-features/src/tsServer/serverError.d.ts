import type * as Proto from './protocol/protocol';
import { TypeScriptVersion } from './versionProvider';
export declare class TypeScriptServerError extends Error {
    readonly serverId: string;
    readonly version: TypeScriptVersion;
    private readonly response;
    readonly serverMessage: string | undefined;
    readonly serverStack: string | undefined;
    private readonly sanitizedStack;
    static create(serverId: string, version: TypeScriptVersion, response: Proto.Response): TypeScriptServerError;
    private constructor();
    get serverErrorText(): string | undefined;
    get serverCommand(): string;
    get telemetry(): {
        readonly command: string;
        readonly serverid: string;
        readonly sanitizedstack: string;
        readonly badclient: boolean;
    };
    /**
     * Given a `errorText` from a tsserver request indicating failure in handling a request,
     * prepares a payload for telemetry-logging.
     */
    private static parseErrorText;
    /**
     * Drop everything but ".js" and line/column numbers (though retain "tsserver" if that's the filename).
     */
    private static sanitizeStack;
}
//# sourceMappingURL=serverError.d.ts.map