import type * as vscode from "vscode";
import * as lsp from "vscode-languageserver-protocol";
import { TSLanguageServiceDelegate } from "../service/delegate";
import { Disposable } from "../utils/dispose";
export declare enum LogLevel {
    Off = 0,
    Trace = 1,
    Debug = 2,
    Info = 3,
    Warning = 4,
    Error = 5
}
export declare class OutputChannel extends Disposable implements vscode.OutputChannel {
    protected readonly delegate: TSLanguageServiceDelegate;
    readonly name: string;
    constructor(delegate: TSLanguageServiceDelegate, name: string);
    append(value: string): void;
    appendLine(value: string): void;
    replace(): void;
    clear(): void;
    show(): void;
    hide(): void;
}
export declare class LogOutputChannel extends OutputChannel implements vscode.LogOutputChannel {
    readonly logLevel = LogLevel.Trace;
    private _onDidChangeLogLevel;
    readonly onDidChangeLogLevel: lsp.Event<vscode.LogLevel>;
    trace(message: string, ...args: any[]): void;
    debug(message: string, ...args: any[]): void;
    info(message: string, ...args: any[]): void;
    warn(message: string, ...args: any[]): void;
    error(error: string | Error, ...args: any[]): void;
}
//# sourceMappingURL=log.d.ts.map