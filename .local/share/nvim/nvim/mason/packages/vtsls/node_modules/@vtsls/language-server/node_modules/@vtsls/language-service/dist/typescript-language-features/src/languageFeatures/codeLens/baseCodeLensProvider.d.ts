import * as vscode from 'vscode';
import { CachedResponse } from '../../tsServer/cachedResponse';
import type * as Proto from '../../tsServer/protocol/protocol';
import { ITypeScriptServiceClient } from '../../typescriptService';
import { Disposable } from '../../utils/dispose';
export declare class ReferencesCodeLens extends vscode.CodeLens {
    document: vscode.Uri;
    file: string;
    constructor(document: vscode.Uri, file: string, range: vscode.Range);
}
export declare abstract class TypeScriptBaseCodeLensProvider extends Disposable implements vscode.CodeLensProvider<ReferencesCodeLens> {
    protected client: ITypeScriptServiceClient;
    private readonly cachedResponse;
    protected changeEmitter: vscode.EventEmitter<void>;
    onDidChangeCodeLenses: vscode.Event<void>;
    static readonly cancelledCommand: vscode.Command;
    static readonly errorCommand: vscode.Command;
    constructor(client: ITypeScriptServiceClient, cachedResponse: CachedResponse<Proto.NavTreeResponse>);
    provideCodeLenses(document: vscode.TextDocument, token: vscode.CancellationToken): Promise<ReferencesCodeLens[]>;
    protected abstract extractSymbol(document: vscode.TextDocument, item: Proto.NavigationTree, parent: Proto.NavigationTree | undefined): vscode.Range | undefined;
    private walkNavTree;
}
export declare function getSymbolRange(document: vscode.TextDocument, item: Proto.NavigationTree): vscode.Range | undefined;
//# sourceMappingURL=baseCodeLensProvider.d.ts.map