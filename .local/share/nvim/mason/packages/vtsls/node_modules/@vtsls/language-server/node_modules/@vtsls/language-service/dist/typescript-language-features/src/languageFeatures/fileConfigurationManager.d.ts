import * as vscode from 'vscode';
import { ITypeScriptServiceClient } from '../typescriptService';
import { Disposable } from '../utils/dispose';
interface FormattingOptions {
    readonly tabSize: number | undefined;
    readonly insertSpaces: boolean | undefined;
}
export default class FileConfigurationManager extends Disposable {
    private readonly client;
    private readonly formatOptions;
    constructor(client: ITypeScriptServiceClient, onCaseInsensitiveFileSystem: boolean);
    ensureConfigurationForDocument(document: vscode.TextDocument, token: vscode.CancellationToken): Promise<void>;
    private getFormattingOptions;
    ensureConfigurationOptions(document: vscode.TextDocument, options: FormattingOptions | undefined, token: vscode.CancellationToken): Promise<void>;
    setGlobalConfigurationFromDocument(document: vscode.TextDocument, token: vscode.CancellationToken): Promise<void>;
    reset(): void;
    private getFileOptions;
    private getFormatOptions;
    private getPreferences;
    private getQuoteStylePreference;
    private getAutoImportFileExcludePatternsPreference;
    private getOrganizeImportsPreferences;
}
export declare class InlayHintSettingNames {
    static readonly parameterNamesSuppressWhenArgumentMatchesName = "inlayHints.parameterNames.suppressWhenArgumentMatchesName";
    static readonly parameterNamesEnabled = "inlayHints.parameterTypes.enabled";
    static readonly variableTypesEnabled = "inlayHints.variableTypes.enabled";
    static readonly variableTypesSuppressWhenTypeMatchesName = "inlayHints.variableTypes.suppressWhenTypeMatchesName";
    static readonly propertyDeclarationTypesEnabled = "inlayHints.propertyDeclarationTypes.enabled";
    static readonly functionLikeReturnTypesEnabled = "inlayHints.functionLikeReturnTypes.enabled";
    static readonly enumMemberValuesEnabled = "inlayHints.enumMemberValues.enabled";
}
export declare function getInlayHintsPreferences(config: vscode.WorkspaceConfiguration): {
    readonly includeInlayParameterNameHints: "none" | "literals" | "all" | undefined;
    readonly includeInlayParameterNameHintsWhenArgumentMatchesName: boolean;
    readonly includeInlayFunctionParameterTypeHints: boolean;
    readonly includeInlayVariableTypeHints: boolean;
    readonly includeInlayVariableTypeHintsWhenTypeMatchesName: boolean;
    readonly includeInlayPropertyDeclarationTypeHints: boolean;
    readonly includeInlayFunctionLikeReturnTypeHints: boolean;
    readonly includeInlayEnumMemberValueHints: boolean;
};
export {};
//# sourceMappingURL=fileConfigurationManager.d.ts.map