import * as vscode from 'vscode';
import { CommandManager } from './commands/commandManager';
import { ServiceConfigurationProvider } from './configuration/configuration';
import { LanguageDescription } from './configuration/languageDescription';
import { IExperimentationTelemetryReporter } from './experimentTelemetryReporter';
import { Logger } from './logging/logger';
import { OngoingRequestCancellerFactory } from './tsServer/cancellation';
import { ILogDirectoryProvider } from './tsServer/logDirectoryProvider';
import { PluginManager } from './tsServer/plugins';
import { TsServerProcessFactory } from './tsServer/server';
import { ITypeScriptVersionProvider } from './tsServer/versionProvider';
import TypeScriptServiceClient from './typescriptServiceClient';
import { ActiveJsTsEditorTracker } from './ui/activeJsTsEditorTracker';
import { Disposable } from './utils/dispose';
export default class TypeScriptServiceClientHost extends Disposable {
    private readonly client;
    private readonly languages;
    private readonly languagePerId;
    private readonly typingsStatus;
    private readonly fileConfigurationManager;
    private reportStyleCheckAsWarnings;
    private readonly commandManager;
    constructor(descriptions: LanguageDescription[], context: vscode.ExtensionContext, onCaseInsensitiveFileSystem: boolean, services: {
        pluginManager: PluginManager;
        commandManager: CommandManager;
        logDirectoryProvider: ILogDirectoryProvider;
        cancellerFactory: OngoingRequestCancellerFactory;
        versionProvider: ITypeScriptVersionProvider;
        processFactory: TsServerProcessFactory;
        activeJsTsEditorTracker: ActiveJsTsEditorTracker;
        serviceConfigurationProvider: ServiceConfigurationProvider;
        experimentTelemetryReporter: IExperimentationTelemetryReporter | undefined;
        logger: Logger;
    }, onCompletionAccepted: (item: vscode.CompletionItem) => void);
    private registerExtensionLanguageProvider;
    private getAllModeIds;
    get serviceClient(): TypeScriptServiceClient;
    reloadProjects(): void;
    handles(resource: vscode.Uri): Promise<boolean>;
    private configurationChanged;
    private findLanguage;
    private triggerAllDiagnostics;
    private populateService;
    private diagnosticsReceived;
    private configFileDiagnosticsReceived;
    private createMarkerDatas;
    private tsDiagnosticToVsDiagnostic;
    private getDiagnosticSeverity;
    private isStyleCheckDiagnostic;
}
//# sourceMappingURL=typeScriptServiceClientHost.d.ts.map