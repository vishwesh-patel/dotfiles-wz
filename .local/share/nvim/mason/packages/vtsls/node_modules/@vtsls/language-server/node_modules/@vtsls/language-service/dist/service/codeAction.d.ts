import type * as vscode from "vscode";
import * as lsp from "vscode-languageserver-protocol";
import { ConfigurationShimService } from "../shims/configuration";
import { CodeActionRegistryHandle } from "../shims/languageFeatures";
import { TSLspConverter } from "../utils/converter";
import { Disposable } from "../utils/dispose";
interface CodeActionData {
    providerId: number;
    index: number;
    cacheId: number;
}
export declare class CodeActionCache extends Disposable {
    private readonly codeActionCache;
    store(items: (vscode.Command | vscode.CodeAction)[], providerId: number): {
        data: CodeActionData;
    }[];
    resolveData(data?: any): ({
        cachedItem: vscode.Command | vscode.CodeAction;
    } & CodeActionData) | undefined;
    private createData;
}
export declare class TSCodeActionFeature extends Disposable {
    private registry;
    private readonly configuration;
    private converter;
    private clientCapabilities;
    private cache;
    constructor(registry: CodeActionRegistryHandle, configuration: ConfigurationShimService, converter: TSLspConverter, clientCapabilities: lsp.ClientCapabilities);
    private get unsupported_actions();
    codeAction(doc: vscode.TextDocument, params: Omit<lsp.CodeActionParams, "textDocument">, token: lsp.CancellationToken): Promise<(lsp.Command | lsp.CodeAction)[] | null>;
    codeActionResolve(item: lsp.CodeAction, token: lsp.CancellationToken): Promise<lsp.CodeAction>;
}
export {};
//# sourceMappingURL=codeAction.d.ts.map