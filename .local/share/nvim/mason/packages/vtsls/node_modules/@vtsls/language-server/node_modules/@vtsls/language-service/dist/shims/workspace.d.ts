import type * as vscode from "vscode";
import * as lsp from "vscode-languageserver-protocol";
import { TSLanguageServiceDelegate } from "../service/delegate";
import { Disposable } from "../utils/dispose";
import { ConfigurationShimService } from "./configuration";
import { IsomorphicTextDocument as TextDocument } from "./textdocument";
export declare class DocumentNotOpenedError extends Error {
    constructor(uri: string);
}
export declare class WorkspaceShimService extends Disposable {
    private readonly delegate;
    private readonly configurationShim;
    private _onDidOpenTextDocument;
    readonly onDidOpenTextDocument: lsp.Event<vscode.TextDocument>;
    private _onDidCloseTextDocument;
    readonly onDidCloseTextDocument: lsp.Event<vscode.TextDocument>;
    private _onDidChangeTextDocument;
    readonly onDidChangeTextDocument: lsp.Event<vscode.TextDocumentChangeEvent>;
    private _onDidRenameFiles;
    readonly onDidRenameFiles: lsp.Event<vscode.FileRenameEvent>;
    readonly onDidChangeConfiguration: lsp.Event<vscode.ConfigurationChangeEvent>;
    private _onDidChangeWorkspaceFolders;
    readonly onDidChangeWorkspaceFolders: lsp.Event<vscode.WorkspaceFoldersChangeEvent>;
    private _onDidGrantWorkspaceTrust;
    readonly onDidGrantWorkspaceTrust: lsp.Event<unknown>;
    private _documents;
    private _workspaceFolderIdGen;
    private _workspaceFolders;
    constructor(delegate: TSLanguageServiceDelegate, configurationShim: ConfigurationShimService, initWorkspaceFolders?: lsp.WorkspaceFolder[]);
    private readonly _fs;
    get fs(): {
        stat(uri: vscode.Uri): Promise<import("./fs").FileStat>;
    };
    get textDocuments(): vscode.TextDocument[];
    get workspaceFolders(): vscode.WorkspaceFolder[];
    $getOpenedDoc(uri: lsp.URI): TextDocument | undefined;
    $getOpenedDocThrow(uri: lsp.URI): TextDocument;
    $openTextDocument(params: lsp.DidOpenTextDocumentParams): void;
    $changeTextDocument(params: lsp.DidChangeTextDocumentParams): void;
    $closeTextDocument(params: lsp.DidCloseTextDocumentParams): void;
    $changeWorkspaceFolders(params: lsp.DidChangeWorkspaceFoldersParams): void;
    $renameFiles(params: lsp.RenameFilesParams): void;
    getWorkspaceFolder(uri: vscode.Uri): vscode.WorkspaceFolder | undefined;
    asRelativePath(pathOrUri: string | vscode.Uri, includeWorkspace?: boolean): string;
    getConfiguration(section?: string): vscode.WorkspaceConfiguration;
    openTextDocument(nameOrUri: vscode.Uri | string): Promise<vscode.TextDocument>;
    applyEdit(edit: vscode.WorkspaceEdit): Promise<boolean>;
    readonly isTrusted = true;
    requestWorkspaceTrust(): Promise<boolean>;
}
//# sourceMappingURL=workspace.d.ts.map