import * as vscode from 'vscode';
import { TypeScriptServiceConfiguration } from '../configuration/configuration';
import { Logger } from '../logging/logger';
import { TelemetryReporter } from '../logging/telemetry';
import Tracer from '../logging/tracer';
import { OngoingRequestCancellerFactory } from '../tsServer/cancellation';
import { ClientCapabilities } from '../typescriptService';
import { ILogDirectoryProvider } from './logDirectoryProvider';
import { TypeScriptPluginPathsProvider } from './pluginPathsProvider';
import { PluginManager } from './plugins';
import { ITypeScriptServer, TsServerDelegate, TsServerProcessFactory } from './server';
import { TypeScriptVersionManager } from './versionManager';
import { ITypeScriptVersionProvider, TypeScriptVersion } from './versionProvider';
import { NodeVersionManager } from './nodeManager';
export declare class TypeScriptServerSpawner {
    private readonly _versionProvider;
    private readonly _versionManager;
    private readonly _nodeVersionManager;
    private readonly _logDirectoryProvider;
    private readonly _pluginPathsProvider;
    private readonly _logger;
    private readonly _telemetryReporter;
    private readonly _tracer;
    private readonly _factory;
    static get tsServerLogOutputChannel(): vscode.OutputChannel;
    constructor(_versionProvider: ITypeScriptVersionProvider, _versionManager: TypeScriptVersionManager, _nodeVersionManager: NodeVersionManager, _logDirectoryProvider: ILogDirectoryProvider, _pluginPathsProvider: TypeScriptPluginPathsProvider, _logger: Logger, _telemetryReporter: TelemetryReporter, _tracer: Tracer, _factory: TsServerProcessFactory);
    spawn(version: TypeScriptVersion, capabilities: ClientCapabilities, configuration: TypeScriptServiceConfiguration, pluginManager: PluginManager, cancellerFactory: OngoingRequestCancellerFactory, delegate: TsServerDelegate): ITypeScriptServer;
    private getCompositeServerType;
    private shouldUseSeparateDiagnosticsServer;
    private spawnTsServer;
    private kindToServerType;
    private getTsServerArgs;
    private static isLoggingEnabled;
    private static getTsLocale;
}
//# sourceMappingURL=spawner.d.ts.map