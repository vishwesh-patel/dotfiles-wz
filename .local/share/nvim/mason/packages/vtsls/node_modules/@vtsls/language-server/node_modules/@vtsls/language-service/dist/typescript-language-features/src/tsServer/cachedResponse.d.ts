import * as vscode from 'vscode';
import { ServerResponse } from '../typescriptService';
import type * as Proto from './protocol/protocol';
type Resolve<T extends Proto.Response> = () => Promise<ServerResponse.Response<T>>;
/**
 * Caches a class of TS Server request based on document.
 */
export declare class CachedResponse<T extends Proto.Response> {
    private response?;
    private version;
    private document;
    /**
     * Execute a request. May return cached value or resolve the new value
     *
     * Caller must ensure that all input `resolve` functions return equivilent results (keyed only off of document).
     */
    execute(document: vscode.TextDocument, resolve: Resolve<T>): Promise<ServerResponse.Response<T>>;
    private matches;
    private reset;
}
export {};
//# sourceMappingURL=cachedResponse.d.ts.map