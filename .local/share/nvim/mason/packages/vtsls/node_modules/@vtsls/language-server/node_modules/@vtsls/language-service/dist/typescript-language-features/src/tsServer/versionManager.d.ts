import * as vscode from 'vscode';
import { TypeScriptServiceConfiguration } from '../configuration/configuration';
import { Disposable } from '../utils/dispose';
import { ITypeScriptVersionProvider, TypeScriptVersion } from './versionProvider';
export declare class TypeScriptVersionManager extends Disposable {
    private configuration;
    private readonly versionProvider;
    private readonly workspaceState;
    private _currentVersion;
    constructor(configuration: TypeScriptServiceConfiguration, versionProvider: ITypeScriptVersionProvider, workspaceState: vscode.Memento);
    private readonly _onDidPickNewVersion;
    readonly onDidPickNewVersion: vscode.Event<void>;
    updateConfiguration(nextConfiguration: TypeScriptServiceConfiguration): void;
    get currentVersion(): TypeScriptVersion;
    reset(): void;
    private pickItemToMessage;
    promptUserForVersion(): Promise<void>;
    private getBundledPickItem;
    private getLocalPickItems;
    private promptUseWorkspaceTsdk;
    private updateActiveVersion;
    private get useWorkspaceTsdkSetting();
    private get suppressPromptWorkspaceTsdkSetting();
    private isInPromptWorkspaceTsdkState;
}
//# sourceMappingURL=versionManager.d.ts.map