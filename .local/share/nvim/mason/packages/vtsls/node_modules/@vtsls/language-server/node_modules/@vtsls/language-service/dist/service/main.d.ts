import * as lsp from "vscode-languageserver-protocol";
import { TSLanguageServiceConfig, TSLanguageServiceOptions } from "./types";
export type TSLanguageService = ReturnType<typeof createTSLanguageService>;
export declare function createTSLanguageService(initOptions: TSLanguageServiceOptions): {
    initialize(config: TSLanguageServiceConfig): Promise<void>;
    dispose(): void;
    initialized: boolean;
    disposed: boolean;
    changeConfiguration(params: lsp.DidChangeConfigurationParams): void;
    openTextDocument(params: lsp.DidOpenTextDocumentParams): void;
    changeTextDocument(params: lsp.DidChangeTextDocumentParams): void;
    closeTextDocument(params: lsp.DidCloseTextDocumentParams): void;
    renameFiles(params: lsp.RenameFilesParams): void;
    changeWorkspaceFolders(params: lsp.DidChangeWorkspaceFoldersParams): void;
    completion: (params: lsp.CompletionParams, token?: lsp.CancellationToken) => Promise<lsp.CompletionList>;
    completionItemResolve: (params: lsp.CompletionItem, token?: lsp.CancellationToken) => Promise<lsp.CompletionItem>;
    documentHighlight: (params: lsp.DocumentHighlightParams, token?: lsp.CancellationToken) => Promise<{
        range: lsp.Range;
        kind: lsp.DocumentHighlightKind;
    }[] | undefined>;
    signatureHelp: (params: lsp.SignatureHelpParams, token?: lsp.CancellationToken) => Promise<lsp.SignatureHelp | undefined>;
    documentLinks: (params: lsp.DocumentLinkParams, token?: lsp.CancellationToken) => Promise<lsp.DocumentLink[] | null>;
    definition: (params: lsp.DefinitionParams, token?: lsp.CancellationToken) => Promise<lsp.Location | lsp.Location[] | lsp.LocationLink[] | undefined>;
    references: (params: lsp.ReferenceParams, token?: lsp.CancellationToken) => Promise<lsp.Location[] | undefined>;
    hover: (params: lsp.HoverParams, token?: lsp.CancellationToken) => Promise<lsp.Hover | undefined>;
    documentSymbol: (params: lsp.DocumentSymbolParams, token?: lsp.CancellationToken) => Promise<lsp.DocumentSymbol[] | lsp.SymbolInformation[] | undefined>;
    workspaceSymbol: (params: lsp.WorkspaceSymbolParams, token?: lsp.CancellationToken) => Promise<lsp.SymbolInformation[] | undefined>;
    codeAction: (params: lsp.CodeActionParams, token?: lsp.CancellationToken) => Promise<(lsp.Command | lsp.CodeAction)[] | null>;
    codeActionResolve: (params: lsp.CodeAction, token?: lsp.CancellationToken) => Promise<lsp.CodeAction>;
    executeCommand: (params: lsp.ExecuteCommandParams, token?: lsp.CancellationToken) => Promise<any>;
    implementation: (params: lsp.ImplementationParams, token?: lsp.CancellationToken) => Promise<lsp.Location | lsp.Location[] | lsp.LocationLink[] | undefined>;
    typeDefinition: (params: lsp.TypeDefinitionParams, token?: lsp.CancellationToken) => Promise<lsp.Location | lsp.Location[] | lsp.LocationLink[] | undefined>;
    documentFormatting: (params: lsp.DocumentFormattingParams, token?: lsp.CancellationToken) => Promise<lsp.TextEdit[] | undefined>;
    documentRangeFormatting: (params: lsp.DocumentRangeFormattingParams, token?: lsp.CancellationToken) => Promise<lsp.TextEdit[] | undefined>;
    documentOnTypeFormatting: (params: lsp.DocumentOnTypeFormattingParams, token?: lsp.CancellationToken) => Promise<lsp.TextEdit[] | undefined>;
    prepareRename: (params: lsp.PrepareRenameParams, token?: lsp.CancellationToken) => Promise<lsp.Range | {
        range: lsp.Range;
        placeholder: string;
    } | undefined>;
    rename: (params: lsp.RenameParams, token?: lsp.CancellationToken) => Promise<lsp.WorkspaceEdit | undefined>;
    foldingRanges: (params: lsp.FoldingRangeParams, token?: lsp.CancellationToken) => Promise<lsp.FoldingRange[] | undefined>;
    selectionRanges: (params: lsp.SelectionRangeParams, token?: lsp.CancellationToken) => Promise<lsp.SelectionRange[] | undefined>;
    prepareCallHierarchy: (params: lsp.CallHierarchyPrepareParams, token?: lsp.CancellationToken) => Promise<lsp.CallHierarchyItem[] | null>;
    incomingCalls: (params: lsp.CallHierarchyIncomingCallsParams, token?: lsp.CancellationToken) => Promise<lsp.CallHierarchyIncomingCall[] | null>;
    outgoingCalls: (params: lsp.CallHierarchyOutgoingCallsParams, token?: lsp.CancellationToken) => Promise<lsp.CallHierarchyOutgoingCall[] | null>;
    inlayHint: (params: lsp.InlayHintParams, token?: lsp.CancellationToken) => Promise<lsp.InlayHint[] | undefined>;
    codeLens: (params: lsp.CodeLensParams, token?: lsp.CancellationToken) => Promise<lsp.CodeLens[] | undefined>;
    codeLensResolve: (params: lsp.CodeLens, token?: lsp.CancellationToken) => Promise<lsp.CodeLens>;
    semanticTokensFull: (params: lsp.SemanticTokensParams, token?: lsp.CancellationToken) => Promise<lsp.SemanticTokens>;
    semanticTokensRange: (params: lsp.SemanticTokensRangeParams, token?: lsp.CancellationToken) => Promise<lsp.SemanticTokens>;
    linkedEditingRange: (params: lsp.LinkedEditingRangeParams, token?: lsp.CancellationToken) => Promise<lsp.LinkedEditingRanges | null | undefined>;
    onShowDocument: (handler: (params: lsp.ShowDocumentParams) => Promise<boolean>) => lsp.Disposable;
    onLogMessage: (handler: (params: lsp.LogMessageParams) => void) => lsp.Disposable;
    onLogTrace: (handler: (params: lsp.LogTraceParams) => void) => lsp.Disposable;
    onShowMessage: (handler: (params: lsp.ShowMessageRequestParams) => Promise<lsp.MessageActionItem | null>) => lsp.Disposable;
    onApplyWorkspaceEdit: (handler: (params: lsp.ApplyWorkspaceEditParams) => Promise<lsp.ApplyWorkspaceEditResult>) => lsp.Disposable;
    onWorkDoneProgress: (handler: () => Promise<import("./types").WorkDoneProgressReporter>) => lsp.Disposable;
    onDiagnostics: (handler: (params: lsp.PublishDiagnosticsParams) => Promise<void>) => lsp.Disposable;
};
//# sourceMappingURL=main.d.ts.map