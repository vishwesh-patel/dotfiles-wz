import * as vscode from 'vscode';
import { CommandManager } from './commands/commandManager';
import { IExperimentationTelemetryReporter } from './experimentTelemetryReporter';
import { OngoingRequestCancellerFactory } from './tsServer/cancellation';
import { ILogDirectoryProvider } from './tsServer/logDirectoryProvider';
import { TsServerProcessFactory } from './tsServer/server';
import { ITypeScriptVersionProvider } from './tsServer/versionProvider';
import TypeScriptServiceClientHost from './typeScriptServiceClientHost';
import { ActiveJsTsEditorTracker } from './ui/activeJsTsEditorTracker';
import { ServiceConfigurationProvider } from './configuration/configuration';
import { Lazy } from './utils/lazy';
import { Logger } from './logging/logger';
import { PluginManager } from './tsServer/plugins';
export declare function createLazyClientHost(context: vscode.ExtensionContext, onCaseInsensitiveFileSystem: boolean, services: {
    pluginManager: PluginManager;
    commandManager: CommandManager;
    logDirectoryProvider: ILogDirectoryProvider;
    cancellerFactory: OngoingRequestCancellerFactory;
    versionProvider: ITypeScriptVersionProvider;
    processFactory: TsServerProcessFactory;
    activeJsTsEditorTracker: ActiveJsTsEditorTracker;
    serviceConfigurationProvider: ServiceConfigurationProvider;
    experimentTelemetryReporter: IExperimentationTelemetryReporter | undefined;
    logger: Logger;
}, onCompletionAccepted: (item: vscode.CompletionItem) => void): Lazy<TypeScriptServiceClientHost>;
export declare function lazilyActivateClient(lazyClientHost: Lazy<TypeScriptServiceClientHost>, pluginManager: PluginManager, activeJsTsEditorTracker: ActiveJsTsEditorTracker, onActivate?: () => Promise<void>): vscode.Disposable;
//# sourceMappingURL=lazyClientHost.d.ts.map