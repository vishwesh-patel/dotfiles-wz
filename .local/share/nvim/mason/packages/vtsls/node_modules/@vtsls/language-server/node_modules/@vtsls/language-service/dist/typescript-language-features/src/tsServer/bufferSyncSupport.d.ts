import * as vscode from 'vscode';
import { ITypeScriptServiceClient } from '../typescriptService';
import { Disposable } from '../utils/dispose';
export default class BufferSyncSupport extends Disposable {
    private readonly client;
    private _validateJavaScript;
    private _validateTypeScript;
    private readonly modeIds;
    private readonly syncedBuffers;
    private readonly pendingDiagnostics;
    private readonly diagnosticDelayer;
    private pendingGetErr;
    private listening;
    private readonly synchronizer;
    private readonly _tabResources;
    constructor(client: ITypeScriptServiceClient, modeIds: readonly string[], onCaseInsensitiveFileSystem: boolean);
    private readonly _onDelete;
    readonly onDelete: vscode.Event<vscode.Uri>;
    private readonly _onWillChange;
    readonly onWillChange: vscode.Event<vscode.Uri>;
    listen(): void;
    handles(resource: vscode.Uri): boolean;
    ensureHasBuffer(resource: vscode.Uri): boolean;
    toVsCodeResource(resource: vscode.Uri): vscode.Uri;
    toResource(filePath: string): vscode.Uri;
    reset(): void;
    reinitialize(): void;
    openTextDocument(document: vscode.TextDocument): boolean;
    closeResource(resource: vscode.Uri): void;
    interruptGetErr<R>(f: () => R): R;
    beforeCommand(command: string): void;
    lineCount(resource: vscode.Uri): number | undefined;
    private onDidCloseTextDocument;
    private onDidChangeTextDocument;
    requestAllDiagnostics(): void;
    getErr(resources: readonly vscode.Uri[]): any;
    private triggerDiagnostics;
    private requestDiagnostic;
    hasPendingDiagnostics(resource: vscode.Uri): boolean;
    private sendPendingDiagnostics;
    private updateConfiguration;
    private shouldValidate;
}
//# sourceMappingURL=bufferSyncSupport.d.ts.map